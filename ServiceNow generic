/* Ensure the parent container takes the full height of the viewport */
html, body {
  height: 100%;
  margin: 0;
}

.table-container {
  display: flex;
  justify-content: center; /* Center horizontally */
  align-items: center; /* Center vertically */
  height: 100vh; /* Full viewport height */
}

.table-rounded {
  border: 1.5px solid gainsboro;
  text-align: center;
  vertical-align: middle;
  font-family: "Roboto Light";
  font-size: 14px;
  white-space: nowrap;
  width: 300px; /* Set a fixed width for the table */
  border-collapse: collapse;
}

.table-rounded th, .table-rounded td {
  border: 1px solid gainsboro;
  padding: 8px;
}

.table-rounded th {
  background-color: #63666A;
  color: white;
  font-weight: 700;
  text-align: center; /* Center the header titles */
  vertical-align: middle; /* Ensure vertical alignment is middle */
}

.table-rounded td {
  line-height: 1.5;
  text-align: center; /* Center the table data */
  vertical-align: middle; /* Ensure vertical alignment is middle */
}

Body HTML template:

<div>
  <table class="table-rounded">
    <thead>
      <tr>
        <th>Requester</th>
        <th>Reservation Start</th>
        <th>Reservation End</th>
        <th>Check-in State</th>
        <th>Reservation State</th>
        <th>Reservation Type</th>
      </tr>
    </thead>
    <tbody>
      <tr ng-repeat="reservation in data.reservations">
        <td>{{reservation.requested_for}}</td>
        <td>{{reservation.start}}</td>
        <td>{{reservation.end}}</td>
        <td>{{reservation.check_in_state}}</td>
        <td>{{reservation.state}}</td>
        <td>{{reservation.reservation_subtype}}</td>
      </tr>
    </tbody>
  </table>
</div>

Client Controller:

function($scope, $window, $interval) {
  /* widget controller */
  var c = this;

  // Set interval to refresh the page every 1 minute
  $interval(function() {
    $window.location.reload();
  }, 60000);
}

Server script:

(function() {
  data.reservations = [];

  var gr = new GlideRecord('sn_wsd_rsv_reservation');
  gr.addEncodedQuery('reservable_module=542a76aa87f5f11074bffdd8cebb35a7^check_in_state=checked_in');
  gr.query();

  while (gr.next()) {
    data.reservations.push({
      requested_for: gr.getDisplayValue('requested_for'),
      start: gr.getDisplayValue('start'),
      end: gr.getDisplayValue('end'),
      check_in_state: gr.getDisplayValue('check_in_state'),
      state: gr.getDisplayValue('state'),
      reservation_subtype: gr.getDisplayValue('reservation_subtype')
    });
  }
})();

CSS:

.table-rounded {
  border: 1.5px solid gainsboro;
  text-align: center;
  vertical-align: middle;
  font-family: "Roboto Light";
  font-size: 14px;
  white-space: nowrap;
  width: 100%;
  margin: 10px auto;
  border-collapse: collapse;
}

.table-rounded th, .table-rounded td {
  border: 1px solid gainsboro;
  padding: 8px;
}

.table-rounded th {
  background-color: #63666A;
  color: white;
  font-weight: 700;
  text-align: center; /* Center the header titles */
  vertical-align: middle; /* Ensure vertical alignment is middle */
}

.table-rounded td {
  line-height: 1.5;
  text-align: center; /* Center the table data */
  vertical-align: middle; /* Ensure vertical alignment is middle */
}




<div>
  <!-- This widget will refresh the page every 5 minutes -->
</div>

(function($window, $interval) {
  // Refresh interval in milliseconds (1 minute)
  var refreshInterval = 1 * 60 * 1000;

  // Function to refresh the page
  function refreshPage() {
    $window.location.reload();
  }

  // Set interval to refresh the page
  $interval(refreshPage, refreshInterval);
})(window, angular.injector(['ng']).get('$interval'));

Client Controller:

(function() {
  /* Initialize the necessary data and configurations for the map components */
  c.showMap = true;
  c.indoorMapConfig = {
    // Add your indoor map configuration here
  };
  c.wsdIndoorMapObject = { isMapwizeLoading: false }; // Add your indoor map object
  c.legends = [
    { name: 'Available', color: '#00FF00' },
    { name: 'Reserved', color: '#FF0000' },
    { name: 'Occupied', color: '#0000FF' }
  ];
  c.floorSelectorOptions = {
    floors: [
      { id: 'floor1', name: 'Floor 1' },
      { id: 'floor2', name: 'Floor 2' }
    ],
    selectedFloor: 'floor1'
  };
  c.buildingSelectorOptions = {
    buildings: [
      { id: 'building1', name: 'Building 1' },
      { id: 'building2', name: 'Building 2' }
    ],
    selectedBuilding: 'building1'
  };
  c.indoorMapCardTemplate = '<div>{{cardData.name}}</div>';
  c.cardData = { name: 'Sample Card Data' };
  c.patternEnabled = true; // Assuming pattern is enabled
  c.displayUserNamesOnMap = true; // Assuming user names should be displayed on the map

  // Function to refresh the map
  function refreshMap() {
    // Logic to refresh the map
    // This could be a simple reload or a more sophisticated refresh logic
    location.reload();
  }

  // Set interval to refresh the map every 5 minutes (300000 milliseconds)
  setInterval(refreshMap, 300000);
})();

Body HTML template:

<div class="map-view indoor-map-container" ng-show="c.showMap">
  <div ng-class="{'map-overlay' : c.wsdIndoorMapObject.isMapwizeLoading}" ng-if="c.wsdIndoorMapObject.isMapwizeLoading">
    <div class="loading-text">
      <div class="fa fa-spinner fa-spin spinner-margin" aria-hidden="true" name="spinner" spin="true"></div>
      <div>
        ${Just a moment while we load the map}
      </div>
    </div>
  </div>
  <div class="map-view indoor-map-container">
    <wsd-indoor-map
      map-options="c.indoorMapConfig"
      on-map-load="c.onIndoorMapLoad"
      on-map-event="c.onMapEvent"
      on-reset-view-click="c.onResetViewClick"
      legends="c.legends"
      floor-selector-options="c.floorSelectorOptions"
      building-selector-options="c.buildingSelectorOptions"
      on-building-selector-change="c.onBuildingSelectorChange"
      card-template="c.indoorMapCardTemplate"
      card-data="c.cardData"
      pattern-enabled="c.patternEnabled"
      on-pattern-enabled-change="c.onPatternEnabledChange"
      place-styles="c.placeStyles"
      display-user-names-on-map="c.displayUserNamesOnMap">
    </wsd-indoor-map>
  </div>
</div>

Server script:

(function() {
  data.isFavoritesEnabled = ($sp.getValue('enable_favorites') === 'true') && gs.tableExists('sn_ex_sp_favorite_content_config');
  data.sessionUserId = gs.getUserID();
  data.enable_recurring_score = gs.getProperty('sn_wsd_rsv.enable_recurring_score') == 'true'? true:false;

  var reservableModuleService = new WSDReservableModuleService();
  var searchService = new WSDSearchService();
  var userUtils = new WSDUserUtils();
  var wsdCoreUtils = new sn_wsd_core.WPCoreUtils();

  data.showReservationDetails = gs.getProperty('sn_wsd_core.floor_plan.portal.show_reservation_details') === 'true';
  data.applicableMappingTech  = wsdCoreUtils.getMappingTechnology();
  data.isMesp = $sp.getValue('url_suffix') == 'mesp';

  data.showDisplayUsersToggleButton = gs.getProperty("sn_wsd_space_map.display_seat_assignment") === 'true';

  if(data.applicableMappingTech == sn_wsd_core.WPConstants.WSD_SOURCE.INDOOR_MAPS) {
    data.mapCampusExternalIdToBuildings = getIndoorMapCampusIdArr();
    data.indoorMapCampusIds = Object.keys(data.mapCampusExternalIdToBuildings);
    data.mapOptions = { 
      config: {
        viewTypeId: sn_wsd_indoor_map.WSDIMUtils.getWSDIndoorMapViewTypeProperty(),
      }
    };
  }

  function getIndoorMapCampusIdArr(){
    var mapCampusExternalIdToBuildings = {};
    var buildingGr = new GlideRecord(sn_wsd_core.WPConstants.TABLES.BUILDING);
    buildingGr.addActiveQuery();
    buildingGr.addQuery('wsd_source',sn_wsd_core.WPConstants.WSD_SOURCE.INDOOR_MAPS);
    buildingGr.addNotNullQuery('external_id');
    buildingGr.addQuery('is_reservable',true);
    buildingGr.orderBy('order');
    buildingGr.orderBy('name');
    buildingGr.query();
    while(buildingGr.next()){
      if(!buildingGr.campus || !buildingGr.campus.external_id)
        continue;
      
      if(!mapCampusExternalIdToBuildings.hasOwnProperty(buildingGr.campus.external_id))
        mapCampusExternalIdToBuildings[buildingGr.campus.external_id] = [];
      mapCampusExternalIdToBuildings[buildingGr.campus.external_id].push({
        sys_id : buildingGr.getUniqueValue(),
        externalId : buildingGr.getValue('external_id'),
        displayValue : buildingGr.getDisplayValue()
      }); 
    }
    return mapCampusExternalIdToBuildings;
  }
})();


CSS:

.map-view {
  width: 100%;
  height: 100%;
  position: relative;
}

.indoor-map-container {
  width: 100%;
  height: 100%;
  position: relative;
}

.map-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(255, 255, 255, 0.8);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 10;
}

.loading-text {
  text-align: center;
}

.spinner-margin {
  margin-right: 10px;
}

function onSubmit() {
   var currentDate = new Date();
   var nextThursday = getNextThursday(currentDate);
 
   // Get the start date from the form
   var startDate = g_form.getValue('start_date');
   var startDateObj = new Date(startDate);
 
   // Check if the start date is before the next Thursday
   if (startDateObj < nextThursday) {
       g_form.setValue('start_date', formatDateTime(nextThursday)); // Set to next Thursday with local time
       g_form.showFieldMsg('start_date', 'Start date must be on or after the Thursday following a 6-day lead time.', 'error');
       return false; // Prevent form submission
   }

   return true; // Allow form submission if the date is valid
}

// Function to get the next Thursday date after a 6-day lead time
function getNextThursday(date) {
   var leadTime = 7; // 7-day lead time
   var leadDate = new Date(date);
   leadDate.setDate(date.getDate() + leadTime);

   var dayOfWeek = leadDate.getDay();
   var daysUntilThursday = (4 - dayOfWeek + 7) % 7; // 4 is Thursday (0 is Sunday)
   if (daysUntilThursday === 0) {
       daysUntilThursday = 7; // If today is Thursday, get the next Thursday
   }
   var nextThursday = new Date(leadDate);
   nextThursday.setDate(leadDate.getDate() + daysUntilThursday);
   nextThursday.setHours(0, 0, 0, 0); // Set time to midnight
   return nextThursday;
}

// Function to format date and time in local time zone
function formatDateTime(date) {
   var year = date.getFullYear();
   var month = ('0' + (date.getMonth() + 1)).slice(-2); // Months are zero-based
   var day = ('0' + date.getDate()).slice(-2);
   var hours = '00';
   var minutes = '00';
   var seconds = '00';
   return year + '-' + month + '-' + day + ' ' + hours + ':' + minutes + ':' + seconds + ' AM';
}

var gr = new GlideRecord('sys_user_grmember');
gr.query();

var recordsToDelete = [];

while (gr.next()) {
  var userGR = new GlideRecord('sys_user');
  if (!userGR.get(gr.user)) {
    gs.log('Marking invalid sys_id for deletion in group membership for user: ' + gr.user + ' for group: ' + gr.group.name);
    recordsToDelete.push(gr.sys_id.toString());
  } else {
    gs.log('This record is OK for user: ' + gr.user + ' in group: ' + gr.group.name);
  }
}

// Delete the marked records
for (var i = 0; i < recordsToDelete.length; i++) {
  var deleteGR = new GlideRecord('sys_user_grmember');
  if (deleteGR.get(recordsToDelete[i])) {
    deleteGR.deleteRecord();
    gs.log('Deleted record with sys_id: ' + recordsToDelete[i]);
  }
}

// Get the 'requested_for' field from the 'request_item' table
var requestedFor = current.request_item.requested_for;

// Get the first name and last name of the 'requested_for' user
var userGR = new GlideRecord('sys_user');
if (userGR.get(requestedFor)) {
    var firstName = userGR.getValue('first_name');
    var lastName = userGR.getValue('last_name');
    
    // Format the name as "First Name, First Initial of Last Name"
    var formattedName = firstName + ', ' + lastName.charAt(0) + '.';
    
    // Update the work notes with the formatted name
    current.work_notes = current.getDisplayValue('assigned_to') + ' for ' + formattedName + ' - ' + current.number;
}
function onCellEdit(sysIDs, table, oldValues, newValue, callback) {
	
	// Iterate through the oldValues array to check if the new value is different from any old value
	if (newValue != oldValues[0])
	{
		var conf = confirm("Assignment Group has been changed! This action will clear the 'Assigned To' fields for updated records. Proceed?");
		if (conf)
		{
			var gr = new GlideRecord(table);
			gr.addQuery('sys_id', 'IN', sysIDs.join(','));
			gr.query();
			while (gr.next()) 
			{
				gr.setValue('assigned_to', '');
				gr.update();
			}			
		}		
	}
  
	// Execute the callback function to complete the onCellEdit action
	callback(conf);
}

(function executeRule(current, previous /*null when async*/) {
    // Function to get the next Thursday date
    function getNextThursday(date) {
        var dayOfWeek = date.getDay();
        var daysUntilThursday = (4 - dayOfWeek + 7) % 7; // 4 is Thursday (0 is Sunday)
        if (daysUntilThursday === 0) {
            daysUntilThursday = 7; // If today is Thursday, get the next Thursday
        }
        var nextThursday = new Date(date);
        nextThursday.setDate(date.getDate() + daysUntilThursday);
        return nextThursday;
    }

    // Get the current date and the next Thursday date
    var currentDate = new Date();
    var nextThursday = getNextThursday(currentDate);

    // Get the start date from the form
    var startDate = g_form.getValue('start_date');
    var startDateObj = new Date(startDate);

    // Check if the start date is before the next Thursday
    if (startDateObj < nextThursday) {
        g_form.showFieldMsg('start_date', 'Start date must be on or after the next Thursday.', 'error');
        g_form.setValue('start_date', nextThursday.toISOString().split('T')[0]); // Set to next Thursday
    }
})(current, previous);


(function() {
    var fieldName = 'group'; // The name of the field you want to change
    var tableName = 'sys_user_grmember'; // The name of the table

    // Get the dictionary entry for the field
    var gr = new GlideRecord('sys_dictionary');
    gr.addQuery('name', tableName);
    gr.addQuery('element', fieldName);
    gr.query();

    if (gr.next()) {
        gr.internal_type = 'reference'; // Set the field type to 'reference'
        gr.reference = 'sys_user_group'; // Set the reference table
        gr.update();
        gs.print('Field type changed to reference for ' + fieldName + ' on table ' + tableName);
    } else {
        gs.print('Field not found');
    }
})();

# Define the access token and endpoint

$endpoint = "https://cdcrnonprod.servicenowservices.com/api/g_cdo2/successfactors"
$accessToken = "vfvtjbLQj_HQnAD9Db9M4bsjEZcqRK6vwuRcMRB4JVP2bUPuR8UhxXnEyw2XV8MDgSLRDfOeDqdOUhAZGz97Dw"

# Define the message body
$body = @{
    requested_for = "Srinivasan Parthasarathy"
    requested_by = "Srinivasan Parthasarathy"
    requester_location = "EIS 1940-Enterprise Information Services-HQ000006"
    requester_phone = "818-357-0507"
    onboarding_type = "New Hire"
    employee_full_name = "Joe Newhire"
    start_date = "2024-08-01"
    end_date = ""
    employee_pernr = "1"
    employee_former_work_location = ""
    employee_former_job_title = ""
    employee_work_location = "EIS 1940-Enterprise Information Services-HQ000006"
    employee_job_title = "Account Clerk II"
    employee_s_direct_supervisor = "Sukhjit Badwal"
    soms = ""
    erms = ""
    obiee_reporting = ""
    hca = ""
    leads = ""
    none = "true"
    distribution_lists_or_security_groups_access = ""
    teams_phone_number_needed = "yes"
    additional_information = ""
} | ConvertTo-Json

# Make the POST request
$response = Invoke-RestMethod -Uri $endpoint -Method Post -Headers @{
    "Authorization" = "Bearer $accessToken"
    "Content-Type" = "application/json"
} -Body $body

# Output the response
$response

# Define the variables
$clientId = "YOUR_CLIENT_ID"
$clientSecret = "YOUR_CLIENT_SECRET"
$username = "YOUR_USERNAME"
$password = "YOUR_PASSWORD"

# Encode the client ID and secret
$encodedAuth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("$clientId:$clientSecret"))

# Define the token endpoint URL
$tokenUrl = "https://$instanceName.service-now.com/oauth_token.do"

# Create the body for the POST request
$body = @{
    grant_type = "password"
    username = $username
    password = $password
}

# Convert the body to a URL-encoded string
$bodyEncoded = [System.Web.HttpUtility]::ParseQueryString([System.String]::Empty)
$body.GetEnumerator() | ForEach-Object { $bodyEncoded.Add($_.Key, $_.Value) }
$bodyString = $bodyEncoded.ToString()

# Define the headers
$headers = @{
    "Authorization" = "Basic $encodedAuth"
    "Content-Type"  = "application/x-www-form-urlencoded"
}

# Make the POST request to get the tokens
$response = Invoke-RestMethod -Uri $tokenUrl -Method Post -Headers $headers -Body $bodyString

# Output the tokens
$accessToken = $response.access_token
$refreshToken = $response.refresh_token

Write-Host "Access Token: $accessToken"
Write-Host "Refresh Token: $refreshToken"

# Define the variables
$clientId = "YOUR_CLIENT_ID"
$clientSecret = "YOUR_CLIENT_SECRET"
$refreshToken = "YOUR_REFRESH_TOKEN"

# Encode the client ID and secret
$encodedAuth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("$clientId:$clientSecret"))

# Define the token endpoint URL
$tokenUrl = "https://$instanceName.service-now.com/oauth_token.do"

# Create the body for the POST request
$body = @{
    grant_type = "refresh_token"
    refresh_token = $refreshToken
}

# Convert the body to a URL-encoded string
$bodyString = ($body.GetEnumerator() | ForEach-Object { "$($_.Key)=$([System.Net.WebUtility]::UrlEncode($_.Value))" }) -join "&"

# Define the headers
$headers = @{
    "Authorization" = "Basic $encodedAuth"
    "Content-Type"  = "application/x-www-form-urlencoded"
}

# Make the POST request to get the new access token
$response = Invoke-RestMethod -Uri $tokenUrl -Method Post -Headers $headers -Body $bodyString

# Output the new access token
$accessToken = $response.access_token

Write-Host "New Access Token: $accessToken"




(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
    // Extract parameters from the request
    var params = request.body.data;
    var itemName = params.itemName;
    var itemDescription = params.itemDescription;
    var itemPrice = params.itemPrice;

    // Create a new cart
    var cart = new Cart();
    var cartItem = cart.addItem('YOUR_CATALOG_ITEM_SYS_ID'); // Replace with your catalog item sys_id

    // Set variables for the catalog item
    cart.setVariable(cartItem, 'itemName', itemName);
    cart.setVariable(cartItem, 'itemDescription', itemDescription);
    cart.setVariable(cartItem, 'itemPrice', itemPrice);

    // Submit the cart and generate the RITM
    var cartId = cart.placeOrder();
    var ritm = new GlideRecord('sc_req_item');
    ritm.addQuery('request', cartId);
    ritm.query();

    if (ritm.next()) {
        // Set the response object
        var responseData = {
            status: 'success',
            message: 'Catalog item and RITM created successfully',
            ritmNumber: ritm.getValue('number'),
            ritmUrl: gs.getProperty('glide.servlet.uri') + 'sc_req_item.do?sys_id=' + ritm.getUniqueValue()
        };
        response.setStatus(201); // Created
        response.setBody(responseData);
    } else {
        // Handle the error case for RITM creation
        var errorData = {
            status: 'error',
            message: 'Failed to create RITM'
        };
        response.setStatus(500); // Internal Server Error
        response.setBody(errorData);
    }
})(request, response);

// Function to get sys_id based on display value
function getSysIdByDisplayValue(tableName, displayValue, displayField) {
    var gr = new GlideRecord(tableName);
    gr.addQuery(displayField, displayValue);
    gr.query();
    if (gr.next()) {
        return gr.sys_id.toString();
    } else {
        return null; // No record found
    }
}

// Example usage
var tableName = 'cmdb_ci'; // Replace with your referenced table name
var displayValue = 'My CI Name'; // Replace with your display value
var displayField = 'name'; // Replace with your display field

var sysId = getSysIdByDisplayValue(tableName, displayValue, displayField);

if (sysId) {
    var gr = new GlideRecord('sc_req_item'); // Replace with your catalog item table
    if (gr.get('sys_id_of_catalog_item')) { // Replace with the sys_id of the catalog item
        gr.u_reference_field = sysId; // Replace with your reference field name
        gr.update();
        gs.info('Reference field set successfully');
    } else {
        gs.info('Catalog item not found');
    }
} else {
    gs.info('Referenced record not found');
}

(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    // implement resource here
	var arr = [];
	var params = request.pathParams;
	var user_sys_id = params.user_sys_id;
	var sarecords = params.records;
	gs.log("User: " + user_sys_id);
	gs.log("Records: " + sarecords);
	response.setBody({'User': user_sys_id, 'Records': sarecords});	
	
	var cartId = GlideGuid.generate(null);
	var cart = new Cart(cartId);

	//add your requested item to the cart by sys_id of the catalog item
	var item = cart.addItem('ad4c3cef1baedd10f367fe6edd4bcbc1', 1);

	//fill in the variables on the request item form
	cart.setVariable(item,"requested_by", user_sys_id); 
	cart.setVariable(item,"what_are_the_service_acccount_that_need_to_be_certified", sarecords);
	var rc = cart.placeOrder();

})(request, response);


