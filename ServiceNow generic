# Define the access token and endpoint

$endpoint = "https://cdcrnonprod.servicenowservices.com/api/g_cdo2/successfactors"
$accessToken = "vfvtjbLQj_HQnAD9Db9M4bsjEZcqRK6vwuRcMRB4JVP2bUPuR8UhxXnEyw2XV8MDgSLRDfOeDqdOUhAZGz97Dw"

# Define the message body
$body = @{
    requested_for = "Srinivasan Parthasarathy"
    requested_by = "Srinivasan Parthasarathy"
    requester_location = "EIS 1940-Enterprise Information Services-HQ000006"
    requester_phone = "818-357-0507"
    onboarding_type = "New Hire"
    employee_full_name = "Joe Newhire"
    start_date = "2024-08-01"
    end_date = ""
    employee_pernr = "1"
    employee_former_work_location = ""
    employee_former_job_title = ""
    employee_work_location = "EIS 1940-Enterprise Information Services-HQ000006"
    employee_job_title = "Account Clerk II"
    employee_s_direct_supervisor = "Sukhjit Badwal"
    soms = ""
    erms = ""
    obiee_reporting = ""
    hca = ""
    leads = ""
    none = "true"
    distribution_lists_or_security_groups_access = ""
    teams_phone_number_needed = "yes"
    additional_information = ""
} | ConvertTo-Json

# Make the POST request
$response = Invoke-RestMethod -Uri $endpoint -Method Post -Headers @{
    "Authorization" = "Bearer $accessToken"
    "Content-Type" = "application/json"
} -Body $body

# Output the response
$response

# Define the variables
$clientId = "YOUR_CLIENT_ID"
$clientSecret = "YOUR_CLIENT_SECRET"
$username = "YOUR_USERNAME"
$password = "YOUR_PASSWORD"

# Encode the client ID and secret
$encodedAuth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("$clientId:$clientSecret"))

# Define the token endpoint URL
$tokenUrl = "https://$instanceName.service-now.com/oauth_token.do"

# Create the body for the POST request
$body = @{
    grant_type = "password"
    username = $username
    password = $password
}

# Convert the body to a URL-encoded string
$bodyEncoded = [System.Web.HttpUtility]::ParseQueryString([System.String]::Empty)
$body.GetEnumerator() | ForEach-Object { $bodyEncoded.Add($_.Key, $_.Value) }
$bodyString = $bodyEncoded.ToString()

# Define the headers
$headers = @{
    "Authorization" = "Basic $encodedAuth"
    "Content-Type"  = "application/x-www-form-urlencoded"
}

# Make the POST request to get the tokens
$response = Invoke-RestMethod -Uri $tokenUrl -Method Post -Headers $headers -Body $bodyString

# Output the tokens
$accessToken = $response.access_token
$refreshToken = $response.refresh_token

Write-Host "Access Token: $accessToken"
Write-Host "Refresh Token: $refreshToken"

# Define the variables
$clientId = "YOUR_CLIENT_ID"
$clientSecret = "YOUR_CLIENT_SECRET"
$refreshToken = "YOUR_REFRESH_TOKEN"

# Encode the client ID and secret
$encodedAuth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("$clientId:$clientSecret"))

# Define the token endpoint URL
$tokenUrl = "https://$instanceName.service-now.com/oauth_token.do"

# Create the body for the POST request
$body = @{
    grant_type = "refresh_token"
    refresh_token = $refreshToken
}

# Convert the body to a URL-encoded string
$bodyEncoded = [System.Web.HttpUtility]::ParseQueryString([System.String]::Empty)
$body.GetEnumerator() | ForEach-Object { $bodyEncoded.Add($_.Key, $_.Value) }
$bodyString = $bodyEncoded.ToString()

# Define the headers
$headers = @{
    "Authorization" = "Basic $encodedAuth"
    "Content-Type"  = "application/x-www-form-urlencoded"
}

# Make the POST request to get the new access token
$response = Invoke-RestMethod -Uri $tokenUrl -Method Post -Headers $headers -Body $bodyString

# Output the new access token
$accessToken = $response.access_token

Write-Host "New Access Token: $accessToken"




(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
    // Extract parameters from the request
    var params = request.body.data;
    var itemName = params.itemName;
    var itemDescription = params.itemDescription;
    var itemPrice = params.itemPrice;

    // Create a new cart
    var cart = new Cart();
    var cartItem = cart.addItem('YOUR_CATALOG_ITEM_SYS_ID'); // Replace with your catalog item sys_id

    // Set variables for the catalog item
    cart.setVariable(cartItem, 'itemName', itemName);
    cart.setVariable(cartItem, 'itemDescription', itemDescription);
    cart.setVariable(cartItem, 'itemPrice', itemPrice);

    // Submit the cart and generate the RITM
    var cartId = cart.placeOrder();
    var ritm = new GlideRecord('sc_req_item');
    ritm.addQuery('request', cartId);
    ritm.query();

    if (ritm.next()) {
        // Set the response object
        var responseData = {
            status: 'success',
            message: 'Catalog item and RITM created successfully',
            ritmNumber: ritm.getValue('number'),
            ritmUrl: gs.getProperty('glide.servlet.uri') + 'sc_req_item.do?sys_id=' + ritm.getUniqueValue()
        };
        response.setStatus(201); // Created
        response.setBody(responseData);
    } else {
        // Handle the error case for RITM creation
        var errorData = {
            status: 'error',
            message: 'Failed to create RITM'
        };
        response.setStatus(500); // Internal Server Error
        response.setBody(errorData);
    }
})(request, response);

// Function to get sys_id based on display value
function getSysIdByDisplayValue(tableName, displayValue, displayField) {
    var gr = new GlideRecord(tableName);
    gr.addQuery(displayField, displayValue);
    gr.query();
    if (gr.next()) {
        return gr.sys_id.toString();
    } else {
        return null; // No record found
    }
}

// Example usage
var tableName = 'cmdb_ci'; // Replace with your referenced table name
var displayValue = 'My CI Name'; // Replace with your display value
var displayField = 'name'; // Replace with your display field

var sysId = getSysIdByDisplayValue(tableName, displayValue, displayField);

if (sysId) {
    var gr = new GlideRecord('sc_req_item'); // Replace with your catalog item table
    if (gr.get('sys_id_of_catalog_item')) { // Replace with the sys_id of the catalog item
        gr.u_reference_field = sysId; // Replace with your reference field name
        gr.update();
        gs.info('Reference field set successfully');
    } else {
        gs.info('Catalog item not found');
    }
} else {
    gs.info('Referenced record not found');
}

(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    // implement resource here
	var arr = [];
	var params = request.pathParams;
	var user_sys_id = params.user_sys_id;
	var sarecords = params.records;
	gs.log("User: " + user_sys_id);
	gs.log("Records: " + sarecords);
	response.setBody({'User': user_sys_id, 'Records': sarecords});	
	
	var cartId = GlideGuid.generate(null);
	var cart = new Cart(cartId);

	//add your requested item to the cart by sys_id of the catalog item
	var item = cart.addItem('ad4c3cef1baedd10f367fe6edd4bcbc1', 1);

	//fill in the variables on the request item form
	cart.setVariable(item,"requested_by", user_sys_id); 
	cart.setVariable(item,"what_are_the_service_acccount_that_need_to_be_certified", sarecords);
	var rc = cart.placeOrder();

})(request, response);


