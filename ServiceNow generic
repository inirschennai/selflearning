audit_tablename = 'sc_task' && audit_fieldname = 'assignment_group'

audit_documentkey = sctask_sys_id

sc_task (sctask)
sys_audit (audit)


<?xml version="1.0" encoding="utf-8" ?>
<j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null">

  <style>
    /* You can add CSS styles here to customize the input field appearance */
  </style>

  <script>
    var my_dashboardMessageHandler = new DashboardMessageHandler("task_updated_by_filter");

    function publishFilter(searchTerm) {
      var filter_message = {};
      filter_message.id = "task_updated_by_filter";
      filter_message.table = "task";

      if (searchTerm == "") {
        clearFilter();
      } else {
        // This filter searches for the partial match in the field....
        filter_message.filter = "sys_updated_byLIKE" + searchTerm;
      }

      SNC.canvas.interactiveFilters.setDefaultValue({
        id: filter_message.id,
        filters: [filter_message]
      }, false);

      my_dashboardMessageHandler.publishFilter(filter_message.table, filter_message.filter);
    }

    function clearFilter() {
      var filter_message = {};
      filter_message.id = "task_updated_by_filter";
      filter_message.table = "task";
      filter_message.filter = "";

      SNC.canvas.interactiveFilters.setDefaultValue({
        id: filter_message.id,
        filters: [filter_message]
      }, false);

      my_dashboardMessageHandler.removeFilter();
    }
  </script>

  <g:evaluate var="groups">
    var groups = new GetUserGroups().getGroups();
    groups;
  </g:evaluate>

  <select id="searchTerm" class="form-control" onchange="publishFilter(this.value);">
    <option value="">Select a group</option>
    <j:forEach var="group" items="${groups}">
      <option value="${group.sys_id}">${group.name}</option>
    </j:forEach>
  </select>

</j:jelly>

var GetUserGroups = Class.create();
GetUserGroups.prototype = {
    initialize: function() {},

    getGroups: function() {
        var gr = new GlideRecord('sys_user_group');
        gr.query();
        var groups = [];
        while (gr.next()) {
            groups.push({
                sys_id: gr.sys_id.toString(),
                name: gr.name.toString()
            });
        }
        return groups;
    },

    type: 'GetUserGroups'
};




